{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","countMyWords","bind","state","id","phrase","total","active","locked","handleIdChange","handlePhraseChange","handleSubmit","newInput","e","console","log","this","setState","target","value","event","preventDefault","axios","post","headers","response","data","onSubmit","className","type","changeFunc","val","label","onChange","React","Component","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAQqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACXC,GAAI,gBACJC,OAAQ,gCACRC,MAAO,EACPC,OAASP,EAAMQ,QAAUR,EAAMO,SAAW,GAE5C,EAAKE,eAAiB,EAAKA,eAAeP,KAApB,gBACtB,EAAKQ,mBAAqB,EAAKA,mBAAmBR,KAAxB,gBAC1B,EAAKS,aAAe,EAAKA,aAAaT,KAAlB,gBACpB,EAAKU,SAAW,EAAKA,SAASV,KAAd,gBAZC,E,4EAeJW,GACbC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAAEb,GAAIS,EAAEK,OAAOC,U,yCAIZN,GACjBG,KAAKC,SAAS,CAAEZ,OAAQQ,EAAEK,OAAOC,U,mCAGtBC,GACXA,EAAMC,iBACNL,KAAKf,iB,8JAIDI,EAAS,CAAED,GAAIY,KAAKb,MAAMC,GAAIC,OAAQW,KAAKb,MAAME,QACrDS,QAAQC,IAAI,WAAYV,G,SAEDiB,IAAMC,KAC3B,uDACAlB,EACA,CAAEmB,QAAS,CAAE,eAAgB,sB,OAHzBC,E,OAKNT,KAAKC,SAAS,CAAEX,MAAOmB,EAASC,OAChCZ,QAAQC,IAAIC,KAAKb,MAAMG,O,qIAKvB,OACE,6BACE,0BAAMqB,SAAUX,KAAKL,cAClBK,KAAKJ,SAASI,KAAKP,eAAgBO,KAAKb,MAAMC,GAAI,MAClDY,KAAKJ,SAASI,KAAKN,mBAAoBM,KAAKb,MAAME,OAAQ,UAC3D,2BAAOuB,UAAU,SAASC,KAAK,SAASV,MAAM,WAEhD,yBAAKS,UAAU,QAAf,eACeZ,KAAKb,MAAMG,U,+BAQvBwB,EAAYC,EAAK3B,GACxB,OACE,yBAAKwB,UAAU,SACb,2BACExB,GAAIA,EACJ4B,MAAO5B,EACPe,MAAOY,EACPE,SAAUH,S,GArEaI,IAAMC,YA4EvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SCxE7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5c8ad9d7.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\n\nimport './App.css';\n\n//Browsers do not like mouseHover for audio events.  \n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.countMyWords = this.countMyWords.bind(this);\n    this.state = {\n      id: 'enter your id',\n      phrase: 'enter a phrase to count words',\n      total: 0,\n      active: (props.locked && props.active) || false\n    };\n    this.handleIdChange = this.handleIdChange.bind(this);\n    this.handlePhraseChange = this.handlePhraseChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.newInput = this.newInput.bind(this);\n  }\n\n  handleIdChange(e) {\n    console.log(e);\n    this.setState({ id: e.target.value });\n  }\n\n\n  handlePhraseChange(e) {\n    this.setState({ phrase: e.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.countMyWords();\n  }\n\n  async countMyWords() {\n    var phrase = { id: this.state.id, phrase: this.state.phrase };\n    console.log('phrase, ', phrase)\n\n    const response = await axios.post(\n      'https://count-my-words.herokuapp.com//phrases//count',\n      phrase,\n      { headers: { 'Content-Type': 'application/json' } }\n    )\n    this.setState({ total: response.data });\n    console.log(this.state.total);\n  }\n\n  render() {\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          {this.newInput(this.handleIdChange, this.state.id, \"ID\")}\n          {this.newInput(this.handlePhraseChange, this.state.phrase, \"PHRASE\")}\n          <input className=\"submit\" type=\"submit\" value=\"Count\" />\n        </form>\n        <div className=\"text\">\n          Your Total: {this.state.total}\n        </div>\n      </div>\n\n    );\n\n  }\n\n  newInput(changeFunc, val, id) {\n    return (\n      <div className=\"field\">\n        <input\n          id={id}\n          label={id}\n          value={val}\n          onChange={changeFunc}\n        />\n      </div>\n    )\n  };\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}