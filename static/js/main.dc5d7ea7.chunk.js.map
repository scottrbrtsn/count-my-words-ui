{"version":3,"sources":["input.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","state","active","locked","value","error","label","event","target","this","setState","which","predicted","fieldClassName","className","includes","id","type","placeholder","onChange","changeValue","bind","onKeyPress","handleKeyPress","onFocus","onBlur","htmlFor","React","Component","render","document","getElementById","App","countMyWords","phrase","total","phrases","axios","post","headers","response","data","console","log","onClick","ReactDOM","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAOMA,G,wBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,OAASF,EAAMG,QAAUH,EAAME,SAAW,EAC1CE,MAAOJ,EAAMI,OAAS,GACtBC,MAAOL,EAAMK,OAAS,GACtBC,MAAON,EAAMM,OAAS,SAPP,E,yEAWPC,GACV,IAAMH,EAAQG,EAAMC,OAAOJ,MAC3BK,KAAKC,SAAS,CAAEN,QAAOC,MAAO,O,qCAGjBE,GACO,KAAhBA,EAAMI,OACRF,KAAKC,SAAS,CAAEN,MAAOK,KAAKT,MAAMY,c,+BAI5B,IAAD,SACiCH,KAAKR,MAArCC,EADD,EACCA,OAAQE,EADT,EACSA,MAAOC,EADhB,EACgBA,MAAOC,EADvB,EACuBA,MADvB,EAEuBG,KAAKT,MAA3BY,EAFD,EAECA,UAAWT,EAFZ,EAEYA,OACbU,EAAc,iBAAaV,EAASD,EAASA,GAAUE,IAC3D,SADkB,YACND,IAAWD,GAAU,UAEnC,OACE,yBAAKY,UAAWD,GACbX,GACCE,GACAQ,GACAA,EAAUG,SAASX,IAAU,uBAAGU,UAAU,aAAaF,GACzD,2BACEI,GAAI,EACJC,KAAK,OACLb,MAAOA,EACPc,YAAaZ,EACba,SAAUV,KAAKW,YAAYC,KAAKZ,MAChCa,WAAYb,KAAKc,eAAeF,KAAKZ,MACrCe,QAAS,kBAAOrB,GAAU,EAAKO,SAAS,CAAER,QAAQ,KAClDuB,OAAQ,kBAAOtB,GAAU,EAAKO,SAAS,CAAER,QAAQ,OAEnD,2BAAOwB,QAAS,EAAGZ,UAAWT,GAAS,SACpCA,GAASC,Q,GA9CAqB,IAAMC,YAqD1BC,iBACE,kBAAC,EAAD,CACEb,GAAI,EACJV,MAAM,cACNM,UAAU,aACVT,QAAQ,EACRD,QAAQ,IAEV4B,SAASC,eAAe,S,IC3DLC,E,YACnB,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KACDiC,aAAe,EAAKA,aAAaZ,KAAlB,gBACpB,EAAKa,OAAS,oBACd,EAAKlB,GAAK,cACV,EAAKmB,MAAQ,EALI,E,qMASbD,EAAS,CAAClB,GAAGP,KAAKO,GAAIkB,OAAOzB,KAAK2B,S,SAEfC,IAAMC,KAC3B,uDACAJ,EACA,CAAEK,QAAS,CAAE,eAAgB,sB,OAHzBC,E,OAKN/B,KAAK0B,MAAQK,EAASC,KACtBC,QAAQC,IAAIlC,KAAK0B,O,qIAMjB,OACM,6BACA,kBAAC,EAAD,CACFnB,GAAI,EACJV,MAAM,KACNM,UAAU,aACVT,QAAQ,EACRD,QAAQ,EACRE,MAAOK,KAAKO,KAEX,kBAAC,EAAD,CACDA,GAAI,EACJV,MAAM,SACNM,UAAU,aACVT,QAAQ,EACRD,QAAQ,EACRE,MAAOK,KAAKyB,SAEZ,4BAAQU,QAASnC,KAAKwB,cAAtB,SAjBE,eAoBWxB,KAAK0B,W,GA7COR,IAAMC,WAoDvCiB,IAAShB,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SCjD7Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNL,IAAShB,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dc5d7ea7.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { TransitionMotion, spring } from \"react-motion\";\nimport \"./App.css\";\n\nexport { Input }\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: (props.locked && props.active) || false,\n      value: props.value || \"\",\n      error: props.error || \"\",\n      label: props.label || \"Label\"\n    };\n  }\n\n  changeValue(event) {\n    const value = event.target.value;\n    this.setState({ value, error: \"\" });\n  }\n\n  handleKeyPress(event) {\n    if (event.which === 13) {\n      this.setState({ value: this.props.predicted });\n    }\n  }\n\n  render() {\n    const { active, value, error, label } = this.state;\n    const { predicted, locked } = this.props;\n    const fieldClassName = `field ${(locked ? active : active || value) &&\n      \"active\"} ${locked && !active && \"locked\"}`;\n\n    return (\n      <div className={fieldClassName}>\n        {active &&\n          value &&\n          predicted &&\n          predicted.includes(value) && <p className=\"predicted\">{predicted}</p>}\n        <input\n          id={1}\n          type=\"text\"\n          value={value}\n          placeholder={label}\n          onChange={this.changeValue.bind(this)}\n          onKeyPress={this.handleKeyPress.bind(this)}\n          onFocus={() => !locked && this.setState({ active: true })}\n          onBlur={() => !locked && this.setState({ active: false })}\n        />\n        <label htmlFor={1} className={error && \"error\"}>\n          {error || label}\n        </label>\n      </div>\n    );\n  }\n}\n\nrender(\n  <Input\n    id={1}\n    label=\"Field label\"\n    predicted=\"California\"\n    locked={false}\n    active={false}\n  />,\n  document.getElementById(\"root\")\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\n\nimport './App.css';\nimport { Input } from \"./input\";\n\n//Browsers do not like mouseHover for audio events.  \n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.countMyWords = this.countMyWords.bind(this);\n    this.phrase = \"enter your phrase\";\n    this.id = \"enter an id\";\n    this.total = 0;\n  }\n\n  async countMyWords() {\n    var phrase = {id:this.id, phrase:this.phrases};\n\n    const response = await axios.post(\n      'https://count-my-words.herokuapp.com//phrases//count',\n      phrase,\n      { headers: { 'Content-Type': 'application/json' } }\n    )\n    this.total = response.data;\n    console.log(this.total)\n\n  }\n\n  render() {\n    \n    return (\n          <div>\n          <Input\n        id={1}\n        label=\"ID\"\n        predicted=\"California\"\n        locked={false}\n        active={false}\n        value={this.id}\n          />\n         <Input\n        id={1}\n        label=\"Phrase\"\n        predicted=\"California\"\n        locked={false}\n        active={false}\n        value={this.phrase}\n          />\n        <button onClick={this.countMyWords}>\n          Count\n        </button>\n        Your Total: {this.total}\n      </div>\n      \n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}